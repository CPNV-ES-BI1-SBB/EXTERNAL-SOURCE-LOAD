
@startuml
class LoadController {
    + receive_data(data: dict): Response
    + validate_input(data: dict): bool
}

class DataTransformer {
    + transform_json_to_sql(data: dict): str
}

class ObjectFactory {
    + create_record(record_type: str, **kwargs): BaseRecord
}

abstract class BaseRecord {
    + to_sql(): str
}

class RecordA {
    + field1: str
    + field2: int
    + to_sql(): str
}

class RecordB {
    + name: str
    + age: int
    + active: bool
    + to_sql(): str
}

class DatabaseHandler {
    + connect(): Connection
    + execute_query(sql_query: str): None
    + close_connection(): None
}

class Logger {
    + log_info(message: str): None
    + log_error(error: Exception): None
}

class Config {
    + db_host: str
    + db_user: str
    + db_password: str
    + db_name: str
}

LoadController --> DataTransformer : transforms data
DataTransformer --> ObjectFactory : uses
ObjectFactory --> BaseRecord : creates
BaseRecord <|-- RecordA
BaseRecord <|-- RecordB
LoadController --> DatabaseHandler : interacts with
LoadController --> Logger : logs errors
DatabaseHandler --> Config : reads settings
Logger <-- Config : retrieves settings
@enduml
